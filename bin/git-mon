#!/bin/bash

#reset terminal colors on exit
trap 'stty sane ; tput cnorm ; kill $(jobs -p)' EXIT

extraParams=$*

Main() {
    git log -n 1 &> /dev/null || { echo Nothing to git in this directory ; exit 1 ; }

	#hide cursor
	tput civis

    #don't echo key press
    stty -echo -icanon time 0 min 0

    statusPrev="/tmp/git-mon-prev"
    statusNow="/tmp/git-mon-now"

    rm -rf $statusPrev $statusNow

    #update remote repo log in background
    GitFetch &

    while true; do
        Lines=$(tput lines)
        Cols=$(tput cols)

        #save current git status
        GitLog &> $statusNow

        #include screen size with status so that redraw will be triggered on terminal resize
        echo $Lines $Cols >> $statusNow

        #print on change only to prevent screen flicker
        diff $statusNow $statusPrev &>/dev/null || { tput clear ; GitLog ; }

        mv -f $statusNow $statusPrev &>/dev/null

        #non-blocking key press read
        key=$(dd bs=1 count=1 2>/dev/null)

        #launch things
        if [[ -n $key ]] ; then
            clear
            rm -f $statusPrev
            [[ "$key" == "d" ]] && git difftool -d 
            [[ "$key" == "D" ]] && git diff --color=always | less -R
            
            continue
        fi

        sleep 2
    done
}


GitLog() {
    MessLen=$(($Cols-20))
    LDate="%<(18,trunc)%ci"
    LName="%<(5,trunc)%ae"
    LHash="%C(auto)%h"
    LMess="%C(white bold)%s%C(reset)"
    LRefs="%C(auto)%D"
    [[ -n $extraParams ]] && All="" || All="--all"
    CmdLog="git log -100 $All --graph --decorate=short --color $extraParams \
     --format=format:\"$LHash $LDate $LName $LRefs %n %x20%x20 $LMess \""

    #suppress status error in case there is no working tree
    CmdStat="git status -s -b -u 2>/dev/null"

    #how long is the status?
    StatusLines=$(eval $CmdStat | CountLines)

    #how much lines left for log?
    LogLines=$(($Lines - $StatusLines))

    #how long is the log including wrapped lines?
    RealLogLines=$(eval $CmdLog --color=never | head -n $LogLines | CountLines)

    #adjust log lines considering wrapped lines
    LogLines=$(($LogLines - $RealLogLines + $LogLines - 3))

    echo

    eval $CmdLog --color=always | head -n $LogLines | perl -lpe 's/(?<=\s)\d\d(\d\d)(?=-)/\1/g ; s/\.\. / /g ; s|origin/|O/|g'

    echo

    eval $CmdStat

    #a marker to show the output is not truncated
    printf "%*s" $(( (3 + $Cols) / 2)) ___
}


GitFetch() {
    while true ; do
        git fetch --all --prune &> /dev/null
        sleep 10
    done
}


CountLines() {
    fold -w $Cols | wc -l
}


Main 