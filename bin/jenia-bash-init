#!/bin/bash


case "$(uname -s)" in
    Linux*)     BashType=linux;;
    CYGWIN*)    BashType=cygwin;;
    MINGW*)     BashType=mingw;;
    *)          BashType=unknown
esac


export PATH=${PATH}:~/my/bin


#decorate ls
alias ll='ls -lh  --group-directories-first --time-style="+%y-%m-%d %H:%M:%S"'
alias la='ll -a'


#mandatory switches
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias yum='sudo yum -y'
alias apt-get='sudo apt-get -y'
alias wireshark='sudo wireshark'
alias virsh='sudo virsh'
alias ethtool='sudo ethtool'
alias ssh='ssh -X'


#open any file
alias o='xdg-open'


#fixes "Couldn't connect to accessibility bus" warning when using SSH
export NO_AT_BRIDGE=1

#use vim
export EDITOR=vim

#show file full path
full() {
    echo "${PWD}/$1"
}


#resolve symlink when checking file type
typel() {
    if [[ $(type -t $1) == "file" ]] ; then
        readlink -f $(type -p $1)
    else
        type $1
    fi
}


#quick find file
f() {
    [[ -z $1 ]] && { echo "Find file in current directory. Usage: f FILE_NAME [DIR]" ; return 1 ; }

    find $2 -iname *${1}*
}


#quick diff
d() {
    [[ -z $1 ]] && { echo "Compare two files. Usage: d FILE_NAME1 [FILE_NAME2]" ; return 1 ; }

    #disable less pager in git
    PAGER=""

    #if no second file use first file name as a pattern and comapre first two matching files
    if [[ -n $2 ]] ; then
        git diff --color-words "$1" "$2" |  tail -n +5
    else
        #show actual file names to be compared
        tput bold ; find . -maxdepth 1 -type f -name "$1*" | head -n 2 | xargs ; tput sgr0

        find . -maxdepth 1 -type f -name "$1*" | head -n 2 | xargs git diff --color-words |  tail -n +5
    fi

    # echo PAGER="" git diff --color-words "$Files"
}


#quick grep
g() {
    [[ -z $1 ]] && { echo "Find text in files. Usage: g REGEX_PATTERN [FILE]" ; return 1 ; }

    #using C locale to avoid "invalid UTF-8 byte sequence in input" bug with binary files

    #if no terminal g() is used as a pipe: search in stdin
    if [[ ! -t 0 ]] ; then
        while read Line ; do
            echo "$Line"
        done  |  LC_ALL=C grep -P --color -I "$@"

        exit
    fi

    declare -a Params=("$@")

    #if last param is not an existing file search in all files
    [[ -e ${Params[@]: -1} ]] || Params+=(*)

    LC_ALL=C grep -P --exclude-dir='*svn*' --color -n -I -r "${Params[@]}"
}


#quick search and replace
snr() {
    [[ -z $1 || -z $2 ]] && { echo "Replace text in files. Usage: snr SEARCH_TEXT REPLACE_TEXT [FILE]" ; return 1 ; }

    BakDir="/tmp/sed-bak"
    mkdir -p $BakDir

    #if file name given use it, else replace in all files recursively
    if [[ -n $3 ]] ; then
        Files="$3"
    else
        Files="*"
    fi

    #escape slashes in the strings
    From=${1////\\/}
    To=${2////\\/}

    #grep is very fast in pattern matching: use it to select files to process
    grep --exclude-dir='*svn*' -r --binary-files=without-match --files-with-matches -P -e "$1" $Files | \
	    while read -r File ; do
	        #backup in a separate directory
	        \cp -f "$File" $BakDir

            perl -p -i -e "s/$From/$To/g" "$File"

            #show replacement results: use git diff if possible, select only colored lines
            if type git &>/dev/null ; then
                git diff --no-index --color-words --word-diff-regex='.' "$BakDir/$(basename $File)" "$File" |  tail -n +5 | \grep -P "\[3[12]m"
            else
                diff -u "$BakDir/$(basename $File)" "$File" | \grep -P "(^|\dm)[-+][^-+]" ; echo
            fi
	    done

    #display replacement results
    # grep -r --color=always -e "$To" /tmp/sed-out/* 2>/dev/null | sed 's!/tmp/sed-out/!!'
}


#quick mount over SSH
mount-ssh() {
    [[ $1 =~ .+:.+ ]] ||  { echo Usage: mount-ssh [user@]host:dir ; return 1 ; } 

    NoCol=${1//:/}           #remove :
    NoSlash=${NoCol////-}    #replace / with -
    MountDir=${NoSlash/%-/}  #remove last -
    MountDir=${MountDir/%./} #remove last -

    #clean up empty dirs from previous mounts
    find ~/mnt -maxdepth 1 -type d -empty -exec rmdir {} \;

	mkdir -p ~/mnt/$MountDir

    sshfs $1 ~/mnt/$MountDir || return 1

    echo $1 mounted on ~/mnt/$MountDir
}


#
#prompt decoration
#

#SshCon array = (CLIENT_IP, CLIENT_PORT, SERVER_IP, SERVER_PORT)
SshCon=($SSH_CONNECTION)
#take SERVER_IP and add a colon if it's present
SshIp=${SshCon[2]}${SshCon[2]:+ }

#show prompt in different color when connected to remote SSH host
[[ -n $SSH_CONNECTION ]] && Color=34 || Color=36

#mark MC prompt (useful in Ctrl-P mode)
[[ -n $MC_SID ]] && Mc='[mc] ' || Mc=''

#if git is installed show git status in prompt
#CentOS: if . /usr/share/git-core/contrib/completion/git-prompt.sh 2>/dev/null ; then

#bash on Windows (handle both mingw and cygwin)
[[ $BashType == cygwin ]] && . '/cygdrive/c/Program Files/Git/mingw64/share/git/completion/git-prompt.sh'
[[ $BashType == mingw ]]  && . '/c/Program Files/Git/mingw64/share/git/completion/git-prompt.sh'


if __git_ps1 >/dev/null 2>&1 ; then
    #show unstaged (*) and staged (+) changes
    export GIT_PS1_SHOWDIRTYSTATE="+"
    #show stashed ($) changes
    export GIT_PS1_SHOWSTASHSTATE="+"
    #show untracked (%) changes
    export GIT_PS1_SHOWUNTRACKEDFILES="+"
    #show branch status relative to its upstream
    export GIT_PS1_SHOWUPSTREAM="verbose"

    #prompt with pwd, host SSH IP, git status, user name, hostname
    PS1='\n\[\e[1;${Color}m\]$Mc$SshIp$PWD`__git_ps1`\n\[\e[00m\]\u@\h$ '
else
    PS1='\n\[\033[01;${Color}m\]$Mc$SshIp$PWD\n\u@\h$\[\033[00m\] '
fi


#run ls if directory changed
PrevDir=$(tty) 
PrevDir=/tmp/prev-dir${PrevDir////-}
#don't ls when shell launched
echo $PWD > $PrevDir
LsAfterCd() {
    [[ "$(< $PrevDir)" == "$PWD" ]] && return 0
    
    ll --color=always | sed 1d

    echo $PWD > $PrevDir
}


#more user-friendly Bash: normally these settings go into ~/.inputrc
#without the bind command, but we keep everything in one file here
if tty -s ; then
    bind 'set show-all-if-ambiguous on'
    bind 'set completion-ignore-case on'
    bind 'set completion-prefix-display-length 1'
    bind 'set history-size 1000'
    bind 'set visible-stats on'
fi


#don't overwrite history: append to it
shopt -s histappend


#persistent Bash history
export HISTTIMEFORMAT="%F %T  "
log_bash_persistent_history()
{
    local rc=$?
        [[ $(history 1) =~ ^\ *[0-9]+\ +([^\ ]+\ [^\ ]+)\ +(.*)$ ]]
        local date_part="${BASH_REMATCH[1]}"
        local command_part="${BASH_REMATCH[2]}"
        if [ "$command_part" != "$PERSISTENT_HISTORY_LAST" ]
        then
            echo $date_part "|" "$command_part" >> ~/.persistent_history
            export PERSISTENT_HISTORY_LAST="$command_part"
        fi
}

# Stuff to do on PROMPT_COMMAND
run_on_prompt_command()
{
    log_bash_persistent_history
    LsAfterCd
}

PROMPT_COMMAND="run_on_prompt_command"
#persistent Bash history end





